Тестовое задание
=================

Решение тестового задания содержит три раздела:

#. `Процесс работы над документом в течение его жизненного цикла`_.

#. `Перечень уточняющих вопросов к разработчику`_.

#. `Описание установки программного компонента в соответствии с шаблоном`_.

Процесс работы над документом в течение его жизненного цикла
-------------------------------------------------------------

#. Анализ исходного текста:
    * Прочитать текст от разработчика, чтобы понять процедуру установки компонента.
    * Выявить недостатки в тексте и определить, какие уточняющие вопросы нужно задать разработчику.
    * Переписать текст так, чтобы он был понятен специалистам, поверхностно знакомым с Kubernetes и Istio.

#. Сбор информации:
    * Задать разработчику уточняющие вопросы.
    * Получить недостающую информацию.

#. Подготовка черновика:
    * Написать первую версию документа, добавив недостающую информацию.
    * Оформить текст согласно шаблону.

#. Ревизия и правки:
    * Перечитать свой черновик, чтобы убедиться в отсутствии ошибок.
    * Отправить документ на проверку:
        - разработчику – для проверки полноты фактов;
        - другому техническому писателю или специалисту – для проверки стиля и структуры документа, достаточности информации и ясности изложения;
        - редактору – например, для проверки соответствия корпоративному стилю (гайдлайну);
    * Внести правки на основе обратной связи.

#. Утверждение и публикация:
    * После окончательной проверки утвердить документ и подготовить его к публикации (передаче заказчику).
    * Публиковать документ в системе управления документацией (передать заказчику в необходимом формате).

Перечень уточняющих вопросов к разработчику
-------------------------------------------

#. Какие требования к версии Kubernetes и Istio?

#. Что подразумевается под «оператором»? Какой оператор нужно установить (название, версия)?

#. Какая роль у этого оператора? Что он делает в среде?

#. Есть ли требования к системным ресурсам для развёртывания оператора?

#. Есть ли примеры bash сценариев для параметра ``--set acm.caroot``?

#. Команда для создания namespace – ``kubectl create namespace itcacm-citadel-system``?

#. Какая команда и параметры используются для создания секрета? Это правильная команда?

    .. code-block::

        kubectl create secret docker-registry <имя_секрета> \
        --docker-server=<URL_реестра> \
        --docker-username=<имя_пользователя> \
        --docker-password=<пароль> \
        --docker-email=<email>

    .. note:: Пояснения к команде:

        - ``<имя_секрета>`` — название секрета, который будет создан;
        - ``<URL_реестра>`` — URL вашего Docker Registry – репозитория Docker-образов (например, для Docker Hub по умолчанию ``https://index.docker.io/v1/``);
        - ``<имя_пользователя>`` — имя пользователя для авторизации в Docker Registry;
        - ``<пароль>`` — пароль для авторизации в Docker Registry;
        - ``<email>`` — адрес электронной почты, связанный с учётной записью.

#. Как проверить успешность установки и работы оператора?

#. Можете уточнить порядок, необходимость и достаточность всех перечисленных шагов (например, нужны ли все перечисленные параметры при установке)?

#. Какая последовательность команд, если нужно откатить изменения?

#. Возможны ли какие-то ошибки в процессе установки и какие способы их решения?

Описание установки программного компонента в соответствии с шаблоном
--------------------------------------------------------------------

**1. Оператор**

Оператор — это программный компонент, который автоматизирует
управление приложениями в кластере Kubernetes. Он выполняет задачи
по развёртыванию, масштабированию и обновлению приложений. Для этого
он использует заранее заданные шаблоны и конфигурации.

1.1. Принцип работы

Оператор расширяет функциональность Kubernetes. Он позволяет
автоматизировать сложные операции, чтобы избежать ручного вмешательства.
Оператор выполняет следующие действия:

#. **Наблюдение**
    Оператор постоянно следит за состоянием управляемых ресурсов
    (приложений, баз данных) в кластере.

#. **Реакция**
    Когда состояние ресурса отклоняется от желаемого, оператор
    принимает меры для обеспечения нормальной работы. Например, если
    приложение перестало отвечать, оператор его перезапустит. Если
    нагрузка на приложение увеличится, оператор выделит дополнительные
    ресурсы. И наоборот – при уменьшении нагрузки на приложение
    оператор освободит ресурсы.

#. **Автоматизация**
    Оператор может автоматически выполнять обновления приложения,
    управлять конфигурациями, осуществлять резервное копирование и
    другие операции без участия человека.

1.2. Установка оператора

#. **Создание namespace**
    Начните с создания отдельного namespace, который будет
    использоваться для развёртывания оператора и связанных с ним
    ресурсов:

    .. code-block::

        kubectl create namespace itcacm-citadel-system

#. **Создание секрета с авторизационными данными для Docker Registry**
    Чтобы Kubernetes мог загружать необходимые образы контейнеров,
    создайте секрет с данными для авторизации:

    .. code-block::

        kubectl create secret docker-registry <имя_секрета> \
        --docker-server=<URL_реестра> \
        --docker-username=<имя_пользователя> \
        --docker-password=<пароль> \
        --docker-email=<email>

    .. note:: Пояснения к команде:

        - ``<имя_секрета>`` — название секрета, который будет создан;
        - ``<URL_реестра>`` — URL вашего Docker Registry – репозитория Docker-образов (например, для Docker Hub по умолчанию ``https://index.docker.io/v1/``);
        - ``<имя_пользователя>`` — имя пользователя для авторизации в Docker Registry;
        - ``<пароль>`` — пароль для авторизации в Docker Registry;
        - ``<email>`` — адрес электронной почты, связанный с учётной записью.

#. **Установка и настройка оператора с использованием Helm Chart**
    Выполните следующую команду для установки оператора.
    Эта команда использует Helm Chart, который задаёт параметры
    развёртывания оператора и связанных с ним ресурсов по заранее
    определённому шаблону:

    .. code-block::

        helm upgrade -f ./chart/cr.yandex.yaml --install acmistio --namespace itcacm-citadel-system \
        --set acm.caroot="$(cat ~/Root_CA.pem)" \
        --set cluster.name=cwi-prod-1 \
        --set image.appVersion=2023.2.1-dev \
        --set acm.configServers="{https://p0esau-ap2301wn.domain.ru/api/acmcd,https://p0esau-ap2302lk.domain.ru/api/acmcd}" \
        ./chart

    Параметры:

    * ``--set acm.caroot``: указывает содержимое файла корневого сертификата, можно использовать bash сценарий.
    * ``--set cluster.name``: задаёт имя кластера, в котором будет развёрнут оператор.
    * ``--set cluster.environment``: определяет окружение для оператора (DEV, TEST, PROD).
    * ``--set acm.configServers``: задаёт список серверов, с которых будут получаться конфигурации.
    * ``--set image.appVersion``: указывает версию приложения и тег Docker-образа (по умолчанию 2023.2.1).

#. **Выдача сертификата для компонента Istio**
    Создайте и сохраните TLS-сертификат в секрете istiod-tls. Сертификат
    обеспечит шифрование данных и безопасное взаимодействие между
    компонентами:

    .. code-block::

        kubectl apply -f ./config/samples/istiod-autocert.yaml -n istio-system

#. **Обновление конфигурации Istio**
    Обновите стандартную конфигурацию Istio, чтобы использовать
    собственную конфигурацию вместо стандартной цитадели. Это позволит
    использовать собственные настройки безопасности, сертификаты и
    другие специфические настройки в вашем окружении.

    .. code-block::

        kubectl apply -f ./config/samples/istio-config-1.12.2.yaml

.. toctree::
   :maxdepth: 2
   :caption: Contents: